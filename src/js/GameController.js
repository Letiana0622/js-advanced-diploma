import { generateTeam } from "./generators";
import Position from "./PositionedCharacter";
/*import GamePlay from './src/js/GamePlay'*/

function positionedTeam() {
  const playerTypes = ["Bowman", "Swordsman", "Magician"];
  const computerTypes = ["Vampire", "Undead", "Daemon"];
  const playerCells = [
    0, 1, 8, 9, 16, 17, 24, 25, 32, 33, 40, 41, 48, 49, 56, 57,
  ];
  const computerCells = [
    6, 7, 14, 15, 22, 23, 30, 31, 38, 39, 46, 47, 54, 55, 62, 63,
  ];
  let teamPlayer = generateTeam(playerTypes, 3, 4);
  /*console.log(teamPlayer.characters)*/
  /*console.log(typeof(teamPlayer))*/

  let teamComputer = generateTeam(computerTypes, 3, 4);
  /*console.log(teamComputer)*/

  let positions = [];

  for (let player of teamPlayer.characters) {
    let randomPlayerPosition =
      playerCells[Math.floor(Math.random() * playerCells.length)];
    let position = new Position(player, randomPlayerPosition);
    positions.push(position);
    /*console.log(positions)*/
  }

  for (let player_ of teamComputer.characters) {
    let randomComputerPosition =
      computerCells[Math.floor(Math.random() * computerCells.length)];
    let position_ = new Position(player_, randomComputerPosition);
    positions.push(position_);
  }
  return positions;
}

export default class GameController {
  constructor(gamePlay, stateService) {
    this.gamePlay = gamePlay;
    this.stateService = stateService;
    this.positions = positionedTeam();
  }

  init() {
    /* window.addEventListener("load", () => {
      this.gamePlay.drawUi("prairie");
      let positions = positionedTeam();
      this.gamePlay.redrawPositions(positions);
    });*/
    this.gamePlay.drawUi("prairie");
    /*let positions = positionedTeam();*/
    /*this.gamePlay.redrawPositions(positions);*/
    this.gamePlay.redrawPositions(this.positions);
    this.gamePlay.addCellEnterListener(this.onCellEnter.bind(this));
    this.gamePlay.addCellLeaveListener(this.onCellLeave.bind(this));
    this.gamePlay.addCellClickListener(this.onCellClick.bind(this));

    // TODO: add event listeners to gamePlay events
    // TODO: load saved stated from stateService
  }

  onCellClick(index) {
    // TODO: react to click
  }

  onCellEnter(index) {
    const activChar = this.positions.find(
      (element) => element.position === index,
    );
    if (activChar) {
      const message = `üéñ${activChar.character.level} ‚öî${activChar.character.attack} üõ°${activChar.character.defence} ‚ù§${activChar.character.health}`;
      this.gamePlay.showCellTooltip(message, index);
    }

    /*const cell = this.cells[index];
    if (cell.firstElementChild) {
      this.gamePlay.showCellTooltip('toolTip',index)
    }*/

    // TODO: react to mouse enter
  }

  onCellLeave(index) {
    this.gamePlay.hideCellTooltip(index);
    // TODO: react to mouse leave
  }
}

/*
generateTeam - —Ñ–æ—Ä–º–∏—Ä—É–µ—Ç –∫–æ–º–∞–Ω–¥—É –Ω–∞ –æ—Å–Ω–æ–≤–µ characterGenerator. –î–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –≤—Å–µ—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –Ω–∞ –ø–æ–ª–µ –ø–æ—Ç—Ä–µ–±—É–µ—Ç—Å—è –≤—ã–∑–≤–∞—Ç—å generateTeam –¥–≤–∞–∂–¥—ã

–ü–µ—Ä—Å–æ–Ω–∞–∂–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É—é—Ç—Å—è —Å–ª—É—á–∞–π–Ω—ã–º –æ–±—Ä–∞–∑–æ–º –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö 1 –∏ 2 –¥–ª—è –∏–≥—Ä–æ–∫–∞ –∏ –≤ —Å—Ç–æ–ª–±—Ü–∞—Ö 7 –∏ 8 –¥–ª—è —Å–æ–ø–µ—Ä–Ω–∏–∫–∞:
–ß—Ç–æ–±—ã –ø—Ä–∏–≤—è–∑–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–∂ –∫ —è—á–µ–π–∫–µ, –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–ª–∞—Å—Å–æ–º PositionedCharacter –≤ src/js/PositionedCharacter.js

const character = new Bowman(2);
const position = 8; // –¥–ª—è –ø–æ–ª—è 8x8 –ª—É—á–Ω–∏–∫ –±—É–¥–µ—Ç –Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è —Å–ª–µ–≤–∞ –Ω–∞ –≤—Ç–æ—Ä–æ–π —Å—Ç—Ä–æ–∫–µ
const positionedCharacter = new PositionedCharacter(character, position); 


–î–ª—è –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –º–µ—Ç–æ–¥–æ–º redrawPositions –∫–ª–∞—Å—Å–∞ src/js/GamePlay.js, 

/**
   * Draws positions (with chars) on boardEl
   *
   * @param positions array of PositionedCharacter objects
   */

/*
redrawPositions(positions) {
  for (const cell of this.cells) {
    cell.innerHTML = '';
  }

  for (const position of positions) {
    const cellEl = this.boardEl.children[position.position];
    const charEl = document.createElement('div');
    charEl.classList.add('character', position.character.type);

    const healthEl = document.createElement('div');
    healthEl.classList.add('health-level');

    const healthIndicatorEl = document.createElement('div');
    healthIndicatorEl.classList.add('health-level-indicator', `health-level-indicator-${calcHealthLevel(position.character.health)}`);
    healthIndicatorEl.style.width = `${position.character.health}%`;
    healthEl.appendChild(healthIndicatorEl);

    charEl.appendChild(healthEl);
    cellEl.appendChild(charEl);
  }
}
*/

/*
–ú–µ—Ç–æ–¥ –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –Ω–∞ –≤—Ö–æ–¥ –º–∞—Å—Å–∏–≤ –æ–±—ä–µ–∫—Ç–æ–≤ PositionedCharacter. 
–î–ª—è —É–ø—Ä–æ—â–µ–Ω–∏—è –ø—Ä–∏ –ª—é–±–æ–º –¥–∞–ª—å–Ω–µ–π—à–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–∏ –∏–≥—Ä–æ–≤–æ–≥–æ –ø–æ–ª—è (–ø–µ—Ä–µ–º–µ—â–µ–Ω–∏–µ –ø–µ—Ä—Å–æ–Ω–∞–∂–∞ –∏–ª–∏ –µ–≥–æ —Å–º–µ—Ä—Ç—å) 
–º—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –≤–∞–º —Ü–µ–ª–∏–∫–æ–º –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞—Ç—å –∏–≥—Ä–æ–≤–æ–µ –ø–æ–ª–µ —Å –ø–æ–º–æ—â—å—é –¥–∞–Ω–Ω–æ–≥–æ –º–µ—Ç–æ–¥–∞.

–õ–æ–≥–∏–∫—É —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è –∏ –æ—Ç—Ä–∏—Å–æ–≤–∫–∏ –∫–æ–º–∞–Ω–¥ –∏–≥—Ä–æ–∫–∞ –∏ —Å–æ–ø–µ—Ä–Ω–∏–∫–∞, –∫–∞–∫ –∏ –ª–æ–≥–∏–∫—É –≤—Å–µ–π –∏–≥—Ä—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –≤ –∫–ª–∞—Å—Å–µ src/js/GameController.js

*/
